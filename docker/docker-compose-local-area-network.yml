services:
  nginx:
    build:
      context: ..
      dockerfile: ./docker/nginx/nginx.localarea.Dockerfile
    container_name: nginx
    restart: always
    ports:
      - '80:80'
      - '443:443'
    volumes:
      - ./nginx/certs:/etc/nginx/certs
      - ./nginx/nginx.localarea.conf.template:/etc/nginx/nginx.localarea.conf.template
    env_file:
      - .env
    networks:
      - full-stack-network
    entrypoint: /etc/nginx/entrypoint.sh

  avahi:
    image: flungo/avahi
    container_name: avahi
    network_mode: host
    restart: always
    env_file:
      - .env
    volumes:
      - avahi-logs:/avahi
      - ./avahi-config:/etc/avahi
    hostname: ${AVAHI_HOSTNAME}
    command: >
      sh -c "apk add --no-cache gettext &&
            envsubst < /etc/avahi/avahi-daemon.conf.template > /etc/avahi/avahi-daemon.conf &&
            rm -rf /var/run/avahi-daemon/*;
            echo 'Starting avahi-daemon and writing logs to /avahi/avahi.log...';
            /usr/sbin/avahi-daemon > /avahi/avahi.log 2>&1;
            tail -f /dev/null"

  postgres:
    image: postgres:13.5
    container_name: postgres
    restart: always
    env_file:
      - .env
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    volumes:
      - postgres:/var/lib/postgresql/data
    networks:
      - full-stack-network
    healthcheck:
      test: ['CMD-SHELL', 'pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}']
      interval: 20s
      timeout: 5s
      retries: 10

  adminer:
    image: adminer
    container_name: adminer
    restart: always
    env_file:
      - .env
    ports:
      - '8080:8080'
    networks:
      - full-stack-network
    depends_on:
      - postgres
    environment:
      ADMINER_DEFAULT_SERVER: 'postgres'
      ADMINER_DEFAULT_DB: ${POSTGRES_DB}
      ADMINER_DEFAULT_USER: ${POSTGRES_USER}
      ADMINER_DEFAULT_PASSWORD: ${POSTGRES_PASSWORD}

  nestjs:
    build:
      context: ..
      dockerfile: ./docker/nest.Dockerfile
    container_name: nestjs
    restart: always
    env_file:
      - .env
      - ../apps/backend/.env
    networks:
      - full-stack-network
    depends_on:
      postgres:
        condition: service_healthy
      hostname-printer:
        condition: service_completed_successfully
    volumes:
      - avahi-logs:/avahi
    entrypoint: /usr/local/bin/wait-and-start-nest.sh

  homepage-app:
    build:
      context: ..
      dockerfile: ./docker/homepage-app.Dockerfile
    container_name: homepage-app
    restart: always
    ports:
      - '3001:3000'
    env_file:
      - .env
      - ../apps/frontend/homepage-app/.env
    networks:
      - full-stack-network
    depends_on:
      hostname-printer:
        condition: service_completed_successfully
    volumes:
      - avahi-logs:/avahi
    entrypoint: /usr/local/bin/wait-and-start-frontend.sh

  hostname-printer:
    image: ubuntu:22.04
    container_name: hostname-printer
    network_mode: host
    restart: 'no'
    env_file:
      - .env
    depends_on:
      postgres:
        condition: service_healthy
      avahi:
        condition: service_started
    volumes:
      - ./scripts:/usr/local/bin
      - avahi-logs:/avahi
    command:
      - sh
      - -c
      - |
        chmod +x /usr/local/bin/hostname-printer.sh
        /usr/local/bin/hostname-printer.sh

volumes:
  postgres:
  avahi-logs:

networks:
  full-stack-network:
    driver: bridge
