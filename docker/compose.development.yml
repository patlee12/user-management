version: '3.9'

services:
  postgres:
    container_name: postgres
    image: postgres:13.5
    restart: on-failure
    env_file:
      - .env
    environment:
      POSTGRES_USER: '${POSTGRES_USER}'
      POSTGRES_PASSWORD: '${POSTGRES_PASSWORD}'
      POSTGRES_DB: '${POSTGRES_DB}'
    volumes:
      - dev_postgres_data:/var/lib/postgresql/data
    ports:
      - '5432:5432'
    networks:
      - full-stack-network
    healthcheck:
      test: ['CMD-SHELL', 'pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}']
      interval: 10s
      timeout: 5s
      retries: 5

  adminer:
    container_name: adminer
    image: adminer
    restart: on-failure
    depends_on:
      postgres:
        condition: service_healthy
    ports:
      - '8081:8080'
    env_file:
      - .env
    environment:
      ADMINER_DEFAULT_SERVER: postgres
      ADMINER_DEFAULT_USER: '${POSTGRES_USER}'
      ADMINER_DEFAULT_PASSWORD: '${POSTGRES_PASSWORD}'
      ADMINER_DEFAULT_DB: '${POSTGRES_DB}'
    networks:
      - full-stack-network
    healthcheck:
      test: ['CMD-SHELL', 'curl --fail http://localhost:8080 || exit 1']
      interval: 15s
      timeout: 5s
      retries: 5

volumes:
  dev_postgres_data:

networks:
  full-stack-network:
    driver: bridge
