services:
  nginx:
    container_name: nginx
    build:
      context: ../..
      dockerfile: ./docker/production/containers/nginx.production.Dockerfile
    image: user-management-nginx
    restart: on-failure
    ports:
      - '80:80'
      - '443:443'
    volumes:
      - ../../docker/production/nginx/certs/live:/etc/nginx/certs/live:ro
      - ../../docker/production/nginx/certs/self-signed:/etc/nginx/certs/self-signed:ro
      - ../../docker/production/nginx/www:/var/www/certbot:ro
      - ../../docker/production/nginx/nginx.production.conf:/etc/nginx/nginx.conf:ro
      - ../../docker/production/nginx/logs:/var/log/nginx
    networks:
      - full-stack-network
    depends_on:
      homepage-app:
        condition: service_started
      nestjs:
        condition: service_started

  certbot:
    container_name: certbot
    image: certbot/certbot:latest
    restart: unless-stopped
    volumes:
      - ../../docker/production/nginx/certs/live:/etc/letsencrypt/live
      - ../../docker/production/nginx/www:/var/www/certbot
    entrypoint: ['sleep', 'infinity']

  cert-renewer:
    container_name: cert-renewer
    build:
      context: ../..
      dockerfile: ./docker/production/containers/cert-renewer.Dockerfile
    restart: unless-stopped
    volumes:
      - ../../docker/production/nginx/certs/live:/etc/letsencrypt/live
      - ../../docker/production/nginx/www:/var/www/certbot
      - ../../docker/production/.env.production:/etc/env.production:ro
      - ../../docker/production/nginx/logs:/var/log
    networks:
      - full-stack-network

  postgres:
    container_name: postgres
    image: postgres:13.5
    restart: on-failure
    env_file:
      - ../../docker/production/.env.production
    environment:
      POSTGRES_USER: '${POSTGRES_USER}'
      POSTGRES_PASSWORD: '${POSTGRES_PASSWORD}'
      POSTGRES_DB: '${POSTGRES_DB}'
      DATABASE_URL: 'postgres://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB}'
    volumes:
      - postgres:/var/lib/postgresql/data
    networks:
      - full-stack-network
    healthcheck:
      test: ['CMD-SHELL', 'pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}']
      interval: 20s
      timeout: 5s
      retries: 10

  adminer:
    container_name: adminer
    image: adminer
    restart: on-failure
    env_file:
      - ../../docker/production/.env.production
    ports:
      - '8080:8080'
    networks:
      - full-stack-network
    depends_on:
      postgres:
        condition: service_healthy
    environment:
      ADMINER_DEFAULT_SERVER: postgres
      ADMINER_DEFAULT_DB: '${POSTGRES_DB}'
      ADMINER_DEFAULT_USER: '${POSTGRES_USER}'
      ADMINER_DEFAULT_PASSWORD: '${POSTGRES_PASSWORD}'

  nestjs:
    container_name: nestjs
    build:
      context: ../..
      dockerfile: ./docker/production/containers/nest.production.Dockerfile
    restart: on-failure
    env_file:
      - ../../docker/production/.env.production
      - ../../apps/backend/.env
    networks:
      - full-stack-network
    depends_on:
      postgres:
        condition: service_healthy

  homepage-app:
    container_name: homepage-app
    build:
      context: ../..
      dockerfile: ./docker/production/containers/homepage-app.production.Dockerfile
    restart: on-failure
    ports:
      - '3001:3000'
    env_file:
      - ../../docker/production/.env.production
      - ../../apps/frontend/homepage-app/.env
    networks:
      - full-stack-network
    depends_on:
      nestjs:
        condition: service_started
    healthcheck:
      test: ['CMD', 'wget', '--spider', '-q', 'http://localhost:3000']
      interval: 30s
      timeout: 5s
      retries: 3

volumes:
  postgres:
    name: '${POSTGRES_VOLUME_NAME}'

networks:
  full-stack-network:
    driver: bridge
