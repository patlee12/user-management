// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "linux-musl", "linux-musl-openssl-3.0.x"]
}


datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model AccountRequest {
  id         Int      @id @default(autoincrement())
  username   String   @unique
  name       String?
  email      String   @unique
  password   String
  token      String?   @unique
  expiresAt  DateTime 
  createdAt  DateTime @default(now())

  @@unique([id, email])
}

model User {
  id            Int      @id @default(autoincrement())
  username      String   @unique
  name          String?
  email         String   @unique
  password      String
  mfaEnabled    Boolean  @default(false)
  emailVerified Boolean  @default(false)
  userRoles     UserRoles[]
  posts         Post[]
  mfa_auth      mfa_auth[]
  PasswordReset PasswordReset[]
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  @@unique([id, email])
}

model PasswordReset {
  id         Int      @id @default(autoincrement())
  user       User     @relation(fields: [userId], references: [id])
  userId     Int      @unique
  token      String   @unique
  expiresAt  DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model Role {
  id          Int          @id @default(autoincrement())
  name        String       @unique
  description String
  permissions Permission[] @relation("RolePermissions")
  createdBy   Int          //Tracks which user created the Resource
  updatedBy   Int          //Tracks which user last updated the Resource
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt

  UserRoles   UserRoles[]
}

model Resource {
  id          Int          @id @default(autoincrement())
  name        String       @unique
  description String
  createdBy   Int          //Tracks which user created the Resource
  updatedBy   Int          //Tracks which user last updated the Resource
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt

  Permission Permission[]
}

//List all action types
enum ActionType {
  CREATE
  READ
  UPDATE
  DELETE
  MANAGE
  APPROVE
  REJECT
  POST
}
model Permission {
  id          Int        @id @default(autoincrement())
  actionType  ActionType
  description String   
  resource    Resource   @relation(fields: [resourceId],references: [id])
  resourceId  Int        //Indicates the resource or module the permission applies to
  isActive    Boolean    @default(true) //Enables or disables the permission without deletion
  createdBy   Int        //Tracks which user created the permission
  updatedBy   Int        //Tracks which user last updated the permission
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  roles       Role[]     @relation("RolePermissions")

  @@unique([actionType,resourceId])
}


model UserRoles {
  user        User      @relation(fields: [userId],references: [id])
  userId      Int
  role        Role      @relation(fields: [roleId],references: [id])
  roleId      Int
  assignedBy  Int      //Tracks which user assigned the role to user
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@id([userId, roleId])  // Composite primary key
  @@unique([userId, roleId]) // Unique constraint to prevent duplicate user-role pairs
}

model Post {
  id          Int      @id @default(autoincrement())
  title       String   @unique
  description String?
  body        String
  published   Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  author      User     @relation(fields: [authorId], references: [id])
  authorId    Int
}

model mfa_auth {
  id          Int      @id @default(autoincrement())
  secret      String
  user        User     @relation(fields: [userId,email],references: [id,email])
  userId      Int      @unique
  email       String   @unique   
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}