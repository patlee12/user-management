// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          Int      @id @default(autoincrement())
  username    String   @unique
  name        String?
  email       String   @unique
  password    String
  mfaEnabled  Boolean  @default(false)
  userRoles   UserRoles[]
  posts       Post[]
  mfa_auth    mfa_auth[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@unique([id, email])
  
 
}

model Role {
  id          Int          @id @default(autoincrement())
  name        String       @unique
  description String?
  permissions Permission[] @relation("RolePermissions")
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt

  UserRoles   UserRoles[]
}

//List all action types and resources
enum ActionType {
  CREATE
  READ
  UPDATE
  DELETE
  MANAGE
  APPROVE
  REJECT
}

enum Resource {
  POSTS
  ROLES
  PERMISSIONS
  USERS
}
model Permission {
  id          Int       @id @default(autoincrement())
  name        String    @unique
  actionType  ActionType
  description String   
  resource    Resource   //Indicates the resource or module the permission applies to
  isActive    Boolean   @default(true) //Enables or disables the permission without deletion
  createdBy   Int      //Tracks which user created the permission
  updatedBy   Int      //Tracks which user last updated the permission
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  roles       Role[]    @relation("RolePermissions")

  @@unique([actionType,resource])
}


model UserRoles {
  user        User      @relation(fields: [userId],references: [id])
  userId      Int
  role        Role      @relation(fields: [roleId],references: [id])
  roleId      Int
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@id([userId, roleId])  // Composite primary key
  @@unique([userId, roleId]) // Unique constraint to prevent duplicate user-role pairs
}

model Post {
  id          Int      @id @default(autoincrement())
  title       String   @unique
  description String?
  body        String
  published   Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  author      User     @relation(fields: [authorId], references: [id])
  authorId    Int
}

model mfa_auth {
  id          Int      @id @default(autoincrement())
  secret      String
  user        User     @relation(fields: [userId,email],references: [id,email])
  userId      Int      @unique
  email       String   @unique   
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}