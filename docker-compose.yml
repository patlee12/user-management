services:
  nginx:
    image: nginx:alpine
    container_name: nginx
    restart: always
    ports:
      - '80:80' # HTTP
      - '443:443' # HTTPS
    volumes:
      - ./certs:/etc/nginx/certs
      - ./nginx.conf:/etc/nginx/nginx.conf
    networks:
      - full-stack-network
    command: ['nginx', '-g', 'daemon off;']
    env_file:
      - .env

  avahi:
    image: flungo/avahi
    container_name: avahi
    network_mode: host # Required for mDNS
    restart: always
    env_file:
      - .env
    volumes:
      - ./avahi-config:/etc/avahi # Optional: Custom configuration
    hostname: ${AVAHI_HOSTNAME}

  postgres:
    image: postgres:13.5
    container_name: postgres
    restart: always
    env_file:
      - .env
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB} # Ensure the correct database is specified
    volumes:
      - postgres:/var/lib/postgresql/data
    networks:
      - full-stack-network
    healthcheck:
      test: ['CMD-SHELL', 'pg_isready -U ${POSTGRES_USER}']
      interval: 10s
      timeout: 5s
      retries: 5
    command: ['postgres', '-c', 'fsync=off'] # Optional: Disable fsync to speed up container startup

  pgadmin:
    image: dpage/pgadmin4
    container_name: pgadmin
    restart: always
    env_file:
      - .env
    ports:
      - '5050:80'
    networks:
      - full-stack-network
    volumes:
      - pgadmin:/var/lib/pgadmin # Ensure pgAdmin has its own volume

  nestjs:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: nestjs
    restart: always
    ports:
      - '3000:3000' # Expose the port your app will run on
    env_file:
      - .env
    networks:
      - full-stack-network
    depends_on:
      postgres:
        condition: service_healthy
    environment:
      DATABASE_URL: 'postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB}'
    command:
      # Only run the app, migrations and seeding are handled in the Dockerfile
      ['yarn', 'start:prod']

volumes:
  postgres:
  pgadmin: # Define separate volume for pgAdmin to avoid any overlap with other services

networks:
  full-stack-network:
    driver: bridge
